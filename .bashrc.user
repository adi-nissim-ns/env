#!/bin/bash

_ENV_PROJECT_DIR=$(dirname $(readlink -f ${BASH_SOURCE[0]}))

source ${_ENV_PROJECT_DIR}/.bashrc.basic_funcs

#------------------------------------------------------------------
# run: menu-slurm 
#------------------------------------------------------------------
# run_command_silent menu-slurm
if [ "$(hostname)" == "slurm-client01" ]; then
  run_command_silent source ${_ENV_PROJECT_DIR}/.bashrc.menu.slurm
  run_command menu-slurm
fi

run_command_silent source ${_ENV_PROJECT_DIR}/.bashrc.funcs

#------------------------------------------------------------------
# run: user_env_vars
#------------------------------------------------------------------
run_command source ${_ENV_PROJECT_DIR}/.bashrc.user_env_vars || return 1

#------------------------------------------------------------------
# Create aliases for common commands
#------------------------------------------------------------------
echo ""
env_create_alias .. "cd .."
env_create_alias ... "cd ../.."
env_create_alias .... "cd ../../.."
env_create_alias lookfor "grep -rnw . -e " 
env_create_cd_alias cdenv "$_ENV_PROJECT_DIR"
env_create_cd_alias cdsw "${SW_HOME}"
env_create_cd_alias cdnext "${NEXT_HOME}"
env_create_cd_alias cdutils "${NEXTUTILS}"
env_create_cd_alias cdkokkos "${SW_HOME}/kokkos"

#------------------------------------------------------------------
# create menu shortcuts
#------------------------------------------------------------------
run_command_silent source ${_ENV_PROJECT_DIR}/.bashrc.menu.main
run_command_silent source ${_ENV_PROJECT_DIR}/.bashrc.menu.run
run_command_silent source ${_ENV_PROJECT_DIR}/.bashrc.menu.env
run_command_silent source ${_ENV_PROJECT_DIR}/.bashrc.menu.kokkos

#------------------------------------------------------------------
# Create directories if they don't exist
# Create aliases for common commands
# Create softlinks for conan and cache
#------------------------------------------------------------------

function create_dir_if_not_exists() {
  local dir=$1
  if [ ! -d "${dir}" ]; then
    read -p "Directory ${dir} does not exist. Do you want to create it? (y/n) " create_dir
    if [ "$create_dir" == "y" ]; then
      env_create_dir ${dir}
    else
      echo "Directory ${dir} does not exist. Do nothing."
      return 1
    fi
  fi
}

create_dir_if_not_exists ${NEXT_HOME}
create_dir_if_not_exists ${SW_HOME}
create_dir_if_not_exists ${NEXTUTILS}
create_dir_if_not_exists /${SHARED_SPACE_NAME}/users/${USER}/.conan2
create_dir_if_not_exists /${SHARED_SPACE_NAME}/users/${USER}/.ccache

function create_softlink_if_not_exists() {
  local target=$1
  local link=$2
  if [ ! -L "${link}" ]; then
    read -p "Softlink ${link} does not exist. Do you want to create it? (y/n) " create_softlink
    if [ "$create_softlink" == "y" ]; then
      create_softlink ${target} ${link}
    else
      echo "Softlink ${link} does not exist. Do nothing."
      return 1
    fi
  fi
} 

create_softlink_if_not_exists ${XDG_CACHE_HOME} ~/.cache
create_softlink_if_not_exists /${SHARED_SPACE_NAME}/users/${USER}/.conan2 ~/.conan2
create_softlink_if_not_exists /${SHARED_SPACE_NAME}/users/${USER}/.ccache ~/.ccache
#------------------------------------------------------------------
# recomended setup for bashrc
#------------------------------------------------------------------

if [ "${LMOD_SETUP}" != true ]; then
  echo_info "Loading Lmod..."
  run_command_silent source /etc/profile.d/lmod.sh
  run_command_silent module load GCCcore/12.3.0 Clang/16.0.6 ccache/4.9.1 GDB/13.2 Perl/5.36.1
  run_command_silent module del OpenSSL
  export CCACHE_DIR="/${SHARED_SPACE_NAME}/users/${USER}/.ccache"
  export CONAN_HOME="/${SHARED_SPACE_NAME}/users/${USER}/.conan2"
  export LMOD_SETUP=true
fi

function are_we_in_a_development_host
{
  # Check if we are in a development host
  local dev_hosts=("dev-sw04" "dev-sw05" "dev-sw02" "dev-sw07")
  local current_host=$(hostname)
  for host in "${dev_hosts[@]}"; do
    if [[ "$current_host" == "$host" ]]; then
      return 0  # We are in a development host
    fi
  done
  return 1  # We are not in a development host
}

# do if we are on a development host
if are_we_in_a_development_host; then
  #------------------------------------------------------------------
  #  Setup rust environment
  #------------------------------------------------------------------
  echo ""
  # Check if rust is installed
  if [ -d "${CARGO_HOME}" ]; then
    echo "Rust is already installed."
  else
    echo "Rust is not installed. Installing..."
    setup_rust_env
  fi

  #------------------------------------------------------------------
  #  Setup python environment
  #------------------------------------------------------------------
  echo ""

  # Check if python_venv directory exists
  if [ -d "${_PY_VENV}" ]; then
    echo "Python virtual environment already exists at ${_PY_VENV}"
  else
    echo "Python virtual environment does not exist. Creating..."
    setup_python_env
  fi
fi  

if [ -f ${ENV_DIR}/.bashrc.tmux ]; then
  source ${ENV_DIR}/.bashrc.tmux
fi

fix-ps1
PS1=${PROMPT_COMMAND}
